const express = require("express");
const Student = require("../models/Student");
const Teacher = require("../models/Teacher");
const Course = require('../models/Course');
const Attendance = require("../models/attendance");
const Marks = require('../models/Marks');
const StudentGrade = require('../models/StudentGrade');
const Faq = require('../models/Faq');
const Complaint = require('../models/Complaint');
const Classwork=require('../models/Classwork');
const jwt = require("jsonwebtoken");

const router = express.Router();

// ➤ Middleware to check if user is an admin
const verifyAdmin = (req, res, next) => {
  try {
    const token = req.header("Authorization")?.split(" ")[1];
    if (!token) return res.status(403).json({ message: "Access denied" });

    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    if (decoded.role !== "admin") {
      return res.status(403).json({ message: "Admin access required" });
    }
    
    req.user = decoded; // Attach user info to request
    next();
  } catch (error) {
    res.status(401).json({ message: "Invalid token" });
  }
};

// Create a new student (Admin Only)
router.post("/registerst",async (req, res) => {
  try {
    const {
      name,
      gender,
      dob,
      cnic,
      rollNo,
      degreeProgram,
      batch,
      campus,
      email,
      password,
      mobile,
      bloodGroup,
      address,
      familyInfo
    } = req.body;

    const existingStudent = await Student.findOne({ email });
    if (existingStudent) {
      return res.status(400).json({ message: "Student already exists" });
    }

    const newStudent = new Student({
      name,
      gender,
      dob,
      cnic,
      rollNo,
      degreeProgram,
      batch,
      campus,
      email,
      password, // password will be hashed in the pre-save hook
      mobile,
      bloodGroup,
      address,
      familyInfo,
      role: "student"
    });

    await newStudent.save();

    res.status(201).json(newStudent);
  } catch (error) {
    console.error("Admin - Student creation error:", error);
    res.status(500).json({ message: "Error creating student", error });
  }
});


//  Get all students (Admin Only)
router.get("/students", verifyAdmin, async (req, res) => {
  try {
    const students = await Student.find();
    res.json(students);
  } catch (error) {
    res.status(500).json({ message: "Error fetching students", error });
  }
});

// Update a student (Admin Only)
/*router.put("/students/:id", verifyAdmin, async (req, res) => {
  try {
    const updatedStudent = await Student.findByIdAndUpdate(req.params.id, req.body, { new: true });
    res.json({ message: "Student updated", updatedStudent });
  } catch (error) {
    res.status(500).json({ message: "Error updating student", error });
  }
});*/

//  Delete a student (Admin Only)
router.delete("/students/:id", verifyAdmin, async (req, res) => {
  try {
    await Student.findByIdAndDelete(req.params.id);
    res.json({ message: "Student deleted successfully" });
  } catch (error) {
    res.status(500).json({ message: "Error deleting student", error });
  }
});

// Create a new teacher (Admin Only)
router.post("/registerteacher",async (req, res) => {
  try {
    const {
      name,
      gender,
      dob,
      cnic,
      tid,
      department,
      datejoined,
      campus,
      email,
      password,
      mobile,
      bloodGroup,
      address,
      familyInfo
    } = req.body;

    const existingTeacher = await Teacher.findOne({ email });
    if (existingTeacher) {
      return res.status(400).json({ message: "Teacher already exists" });
    }

    const newTeacher = new Teacher({
      name,
      gender,
      dob,
      cnic,
      tid,
      department,
      datejoined,
      campus,
      email,
      password,
      mobile,
      bloodGroup,
      address,
      familyInfo,
      role: "teacher"
    });

    await newTeacher.save();

    res.status(201).json(newTeacher);
  } catch (error) {
    console.error("Admin - Teacher creation error:", error);
    res.status(500).json({ message: "Error creating teacher", error });
  }
});

router.get("/teachers", verifyAdmin, async (req, res) => {
    try {
      const students = await Student.find();
      res.json(students);
    } catch (error) {
      res.status(500).json({ message: "Error fetching students", error });
    }
  });
  
  // Update a student (Admin Only)
  router.put("/teachers/:id", verifyAdmin, async (req, res) => {
    try {
      const updatedStudent = await Student.findByIdAndUpdate(req.params.id, req.body, { new: true });
      res.json({ message: "Faculty member updated", updatedStudent });
    } catch (error) {
      res.status(500).json({ message: "Error updating faculty member", error });
    }
  });
  
  //  Delete a student (Admin Only)
  router.delete("/teachers/:id", verifyAdmin, async (req, res) => {
    try {
      await Student.findByIdAndDelete(req.params.id);
      res.json({ message: "Faculty member deleted successfully" });
    } catch (error) {
      res.status(500).json({ message: "Error deleting Faculty member", error });
    }
  });
  


  
// @route   POST /api/admin/registercourse
// @desc    Register a new course with optional prerequisites
router.post('/registercourse', async (req, res) => {
  try {
    const {
      id,
      name,
      instructor, // expected: { id: "...", name: "..." }
      semester,
      sections,
      seatAvailability,
      creditHours,
      prerequisites // expected: ["CS101", "MA202"]
    } = req.body;

    // Validate instructor object
    if (!instructor || !instructor.id || !instructor.name) {
      return res.status(400).json({ message: 'Instructor data is required (id and name).' });
    }

    // Validate that prerequisites is an array (optional)
    const validPrerequisites = Array.isArray(prerequisites) ? prerequisites : [];

    const newCourse = new Course({
      id,
      name,
      instructor: {
        id: instructor.id,
        name: instructor.name,
      },
      semester,
      sections,
      seatAvailability,
      creditHours,
      prerequisites: validPrerequisites
    });

    await newCourse.save();
    res.status(201).json(newCourse);
  } catch (error) {
    console.error('Error creating course:', error);
    res.status(500).json({ message: 'Server error while creating course' });
  }
});
  
  // @route   GET /api/courses
  // @desc    Get all courses
  router.get('/course', async (req, res) => {
    try {
      const courses = await Course.find();
      res.json(courses);
    } catch (error) {
      console.error('Error fetching courses:', error);
      res.status(500).json({ message: 'Server error while fetching courses' });
    }
  });
  
  // @route   GET /api/courses/:id
  // @desc    Get a course by course ID
  router.get('/course/:id', async (req, res) => {
    try {
      const course = await Course.findOne({ id: req.params.id });
      if (!course) {
        return res.status(404).json({ message: 'Course not found' });
      }
      res.json(course);
    } catch (error) {
      console.error('Error fetching course:', error);
      res.status(500).json({ message: 'Server error while fetching course' });
    }
  });
  
  // @route   PUT /api/courses/:id
  // @desc    Update a course by course ID
  router.put('/course/:id', async (req, res) => {
    try {
      const updated = await Course.findOneAndUpdate(
        { id: req.params.id },
        req.body,
        { new: true }
      );
      if (!updated) {
        return res.status(404).json({ message: 'Course not found' });
      }
      res.json(updated);
    } catch (error) {
      console.error('Error updating course:', error);
      res.status(500).json({ message: 'Server error while updating course' });
    }
  });

  // Add student to a course from Admin Panel
router.post('/add-student', async (req, res) => {
  try {
    const { courseId, section, studentRollNo, studentEmail } = req.body;

    const Student = require('../models/Student');
    const Course = require('../models/Course');

    const student = await Student.findOne({ rollNo: studentRollNo, email: studentEmail });
    const course = await Course.findOne({ id: courseId });

    if (!student || !course) {
      return res.status(404).json({ message: 'Student or Course not found' });
    }

    // Check if already registered
    const alreadyRegistered = student.registeredCourses.some(
      (c) => c.id === courseId && c.section === section
    );

    if (alreadyRegistered) {
      return res.status(400).json({ message: 'Student already registered in this course and section' });
    }

    // Add course to student's registeredCourses
    student.registeredCourses.push({
      id: courseId,
      section: section,
    });
    await student.save();

    // Decrease seat count in Course
    if (course.seatAvailability > 0) {
      course.seatAvailability -= 1;
      await course.save();
    }

    res.json({ message: 'Student added successfully' });
  } catch (error) {
    console.error('Admin Add Student Error:', error);
    res.status(500).json({ message: 'Failed to add student' });
  }
});


// REGISTER COURSE
router.post("/register", async (req, res) => {
  try {
    const { courseId, section, semester, studentEmail, studentRollNo } = req.body; // 🛠️ include semester from request

    const course = await Course.findOne({ id: courseId, sections: section, semester: semester });
    if (!course) return res.status(404).json({ message: "Course not found" });

    const student = await Student.findOne({ email: studentEmail, rollNo: studentRollNo });
    if (!student) return res.status(404).json({ message: "Student not found" });

    const alreadyRegistered = student.registeredCourses.some(
      (c) => c.id === courseId && c.section === section && c.semester === semester // 🛠️ also match semester
    );
    const alreadyWaitlisted = student.waitlistedCourses.some(
      (c) => c.id === courseId && c.section === section && c.semester === semester
    );

    if (alreadyRegistered || alreadyWaitlisted) {
      return res.status(400).json({ message: "Already registered or waitlisted" });
    }

    if (course.seatAvailability > 0) {
      course.seatAvailability -= 1;
      student.registeredCourses.push({ id: courseId, section, semester }); // 🛠️ save semester here
      await course.save();
      await student.save();
      return res.status(200).json({ message: "Registered successfully", status: "registered" });
    } else {
      student.waitlistedCourses.push({ id: courseId, section, semester }); // 🛠️ save semester here too
      await student.save();
      return res.status(200).json({ message: "Added to waitlist", status: "waitlisted" });
    }
  } catch (error) {
    console.error("Registration error:", error);
    res.status(500).json({ message: "Server error during registration" });
  }
});

  
  // DROP COURSE
  router.post("/drop", async (req, res) => {
    try {
      const { courseId, section, studentEmail, studentRollNo } = req.body;
  
      const course = await Course.findOne({ id: courseId, sections: section });
      if (!course) return res.status(404).json({ message: "Course not found" });
  
      const student = await Student.findOne({ email: studentEmail, rollNo: studentRollNo });
      if (!student) return res.status(404).json({ message: "Student not found" });
  
      let actionTaken = "";
  
      const isRegistered = student.registeredCourses.some(
        (c) => c.id === courseId && c.section === section
      );
      if (isRegistered) {
        student.registeredCourses = student.registeredCourses.filter(
          (c) => !(c.id === courseId && c.section === section)
        );
        course.seatAvailability += 1;
        actionTaken = "dropped";
      }
  
      const isWaitlisted = student.waitlistedCourses.some(
        (c) => c.id === courseId && c.section === section
      );
      if (isWaitlisted) {
        student.waitlistedCourses = student.waitlistedCourses.filter(
          (c) => !(c.id === courseId && c.section === section)
        );
        actionTaken = "removed_from_waitlist";
      }
  
      await course.save();
      await student.save();
  
      res.status(200).json({
        message: `Successfully ${actionTaken.replace("_", " ")}`,
        status: actionTaken,
      });
    } catch (error) {
      console.error("Drop error:", error);
      res.status(500).json({ message: "Server error during course drop" });
    }
  });
  
  
  router.get("/courses", async (req, res) => {
    try {
      const { email, rollNo } = req.query;
  
      if (!email || !rollNo) {
        return res.status(400).json({ message: "Email and roll number are required." });
      }
  
      const student = await Student.findOne({ email, rollNo });
      if (!student) {
        return res.status(404).json({ message: "Student not found." });
      }
  
      // Fetch registered courses using both id and section
      const registeredPromises = student.registeredCourses.map(c =>
        Course.findOne({ id: c.id, sections: c.section })
      );
      const waitlistedPromises = student.waitlistedCourses.map(c =>
        Course.findOne({ id: c.id, sections: c.section })
      );
  
      const registered = (await Promise.all(registeredPromises)).filter(Boolean);
      const waitlisted = (await Promise.all(waitlistedPromises)).filter(Boolean);
  
      res.status(200).json({
        registered,
        waitlisted,
      });
    } catch (error) {
      console.error("Error fetching student courses:", error);
      res.status(500).json({ message: "Server error while fetching student courses" });
    }
  });
  
  router.get("/courses/:id/sections/:section/students", async (req, res) => {
    const { id, section } = req.params;
  
    try {
      const students = await Student.find({
        registeredCourses: {
          $elemMatch: { id, section }
        }
      });
  
      res.status(200).json(students);
    } catch (error) {
      console.error("Error fetching enrolled students:", error);
      res.status(500).json({ message: "Server error while fetching students" });
    }
  });
  router.post('/attendance', async (req, res) => {
    try {
      const attendance = new Attendance(req.body);
      await attendance.save();
      res.status(201).json(attendance);
    } catch (error) {
      console.error('Error saving attendance:', error);
      res.status(500).json({ message: 'Server error while saving attendance' });
    }
  });

  router.get('/attendance/:courseId/:section', async (req, res) => {
    const { courseId, section } = req.params;
    try {
      const records = await Attendance.find({ courseId, section }).sort({ date: -1 });
      res.status(200).json(records);
    } catch (error) {
      console.error('Error fetching attendance:', error);
      res.status(500).json({ message: 'Server error while fetching attendance' });
    }
  });
  
  router.put('/attendance/:id', async (req, res) => {
    try {
      const updated = await Attendance.findByIdAndUpdate(req.params.id, req.body, { new: true });
      res.status(200).json(updated);
    } catch (error) {
      console.error('Error updating attendance:', error);
      res.status(500).json({ message: 'Server error while updating attendance' });
    }
  });

  router.get('/teachers/:tid/courses', async (req, res) => {
    const { tid } = req.params;
  
    try {
      const courses = await Course.find({ 'instructor.id': tid.trim() }); // normalize & compare string
      res.status(200).json(courses);
    } catch (error) {
      console.error('Error fetching teacher courses:', error);
      res.status(500).json({ message: 'Server error while fetching courses' });
    }
  });

  // GET all attendance records or filter by student
router.get('/attendance/all', async (req, res) => {
  try {
    const { rollNo } = req.query; // Optional filter by student roll number

    let records;

    if (rollNo) {
      // Filter records where students array includes given rollNo
      records = await Attendance.find({
        'students.rollNo': rollNo
      });
    } else {
      // Return all attendance records
      records = await Attendance.find();
    }

    res.status(200).json(records);
  } catch (error) {
    console.error('Error fetching attendance records:', error);
    res.status(500).json({ message: 'Server error while fetching attendance records' });
  }
});



router.post('/marks', async (req, res) => {
  try {
    const newMarks = new Marks(req.body);
    await newMarks.save();
    res.status(201).json(newMarks);
  } catch (error) {
    console.error("Error adding marks:", error);
    res.status(500).json({ message: "Error saving marks" });
  }
});

router.get('/marks/:courseId/:section', async (req, res) => {
  try {
    const { courseId, section } = req.params;
    const records = await Marks.find({ courseId, section });
    res.json(records);
  } catch (error) {
    console.error("Error fetching marks:", error);
    res.status(500).json({ message: "Error fetching marks" });
  }
});

// PUT route in your backend
router.put('/marks/:id', async (req, res) => {
  try {
    const updated = await Marks.findByIdAndUpdate(req.params.id, req.body, { new: true });
    res.json(updated);
  } catch (err) {
    res.status(500).json({ message: "Error updating marks" });
  }
});

router.post('/student-grades', async (req, res) => {
  const existing = await StudentGrade.findOne({
    rollNo: req.body.rollNo,
    courseId: req.body.courseId,
    section: req.body.section
  });

  if (existing) {
    await StudentGrade.updateOne({ _id: existing._id }, req.body);
    return res.json({ message: 'Updated' });
  }

  const newGrade = new StudentGrade(req.body);
  await newGrade.save();
  res.json(newGrade);
});

router.get('/student-grades/:courseId/:section', async (req, res) => {
  const { courseId, section } = req.params;

  try {
    const students = await StudentGrade.find({ courseId, section });
    res.json(students);
  } catch (error) {
    console.error('Failed to fetch student grades', error);
    res.status(500).json({ message: 'Server Error' });
  }
});

router.delete('/marks/:id', async (req, res) => {
  try {
    const deleted = await Marks.findByIdAndDelete(req.params.id);
    if (!deleted) {
      return res.status(404).json({ message: 'Marks record not found' });
    }
    res.json({ message: 'Marks record deleted successfully' });
  } catch (error) {
    console.error('Error deleting marks:', error);
    res.status(500).json({ message: 'Server error while deleting marks' });
  }
});

// routes/admin.js
router.get('/marks/student/:rollNo', async (req, res) => {
  const rollNo = req.params.rollNo;
  try {
    const marks = await Marks.find({ "students.rollNo": rollNo });
    res.json(marks);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "Error fetching marks" });
  }
});


// GET ALL MARKS
router.get('/marks/all', async (req, res) => {
  try {
    const marks = await Marks.find();
    res.status(200).json(marks);
  } catch (error) {
    console.error('Error fetching marks:', error);
    res.status(500).json({ message: 'Server error while fetching marks' });
  }
});



// GET student grades by roll number
router.get('/student-grades/:rollNo', async (req, res) => {
  try {
    const { rollNo } = req.params;
    const grades = await StudentGrade.find({ rollNo });
    res.status(200).json(grades);
  } catch (error) {
    console.error('Error fetching student grades:', error);
    res.status(500).json({ message: 'Failed to fetch student grades.' });
  }
});

// Get logged in student's grades
router.get('/mystudentgrades', async (req, res) => {
  try {
    const { rollNo } = req.query;
    const grades = await StudentGrade.find({ rollNo });
    res.json(grades);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Failed to fetch student grades' });
  }
});
// Post a grade change request
router.post('/request-change', async (req, res) => {
  try {
    const { gradeId, comment } = req.body;

    const grade = await StudentGrade.findById(gradeId);
    if (!grade) return res.status(404).json({ message: 'Grade not found' });

    grade.changeRequested = true;
    grade.changeComment = comment || '';
    grade.status = 'pending'; // ✅ Very important: Set status = pending
    await grade.save();

    res.json({ message: 'Grade change request submitted successfully' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Failed to submit grade change request' });
  }
});
router.get('/requests', async (req, res) => {
  const { courseId, section } = req.query;
  try {
    const requests = await StudentGrade.find({ 
      courseId, 
      section, 
      changeRequested: true 
    });
    res.json(requests);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Failed to fetch grade requests' });
  }
});
router.put('/update-status', async (req, res) => {
  const { gradeId, status } = req.body;
  try {
    const grade = await StudentGrade.findById(gradeId);
    if (!grade) return res.status(404).json({ message: 'Grade not found' });

    grade.status = status;
    await grade.save();
    res.json({ message: 'Status updated successfully' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Failed to update status' });
  }
});


// Update GPA and CGPA for a student
router.put('/update-student-gpa/:rollNo', async (req, res) => {
  try {
    const { rollNo } = req.params;
    const { cgpa, gpas } = req.body; // gpas is array, cgpa is string

    const student = await Student.findOne({ rollNo });
    if (!student) {
      return res.status(404).json({ message: 'Student not found' });
    }

    student.gpas = gpas;   // Update semester GPA list
    student.cgpa = cgpa;   // Update overall CGPA
    await student.save();

    res.status(200).json({ message: 'GPA and CGPA updated successfully!' });
  } catch (error) {
    console.error('Error updating student GPA/CGPA:', error);
    res.status(500).json({ message: 'Failed to update GPA/CGPA.' });
  }
});

// 📌 Add a new FAQ
router.post('/add-faq', async (req, res) => {
  try {
    const { question, answer } = req.body;

    const faq = new Faq({ question, answer });
    await faq.save();

    res.status(201).json({ message: 'FAQ added successfully' });
  } catch (error) {
    console.error('Error adding FAQ:', error);
    res.status(500).json({ message: 'Failed to add FAQ' });
  }
});

// 📌 Fetch all FAQs
router.get('/all-faqs', async (req, res) => {
  try {
    const faqs = await Faq.find().sort({ createdAt: -1 });
    res.status(200).json(faqs);
  } catch (error) {
    console.error('Error fetching FAQs:', error);
    res.status(500).json({ message: 'Failed to fetch FAQs' });
  }
});

// 📌 Submit a complaint
router.post('/submit-complaint', async (req, res) => {
  try {
    const { email, errorTitle, errorDetail } = req.body;

    const complaint = new Complaint({ email, errorTitle, errorDetail });
    await complaint.save();

    res.status(201).json({ message: 'Complaint submitted successfully' });
  } catch (error) {
    console.error('Error submitting complaint:', error);
    res.status(500).json({ message: 'Failed to submit complaint' });
  }
});

// 📌 Fetch all complaints
router.get('/all-complaints', async (req, res) => {
  try {
    const complaints = await Complaint.find().sort({ createdAt: -1 });
    res.status(200).json(complaints);
  } catch (error) {
    console.error('Error fetching complaints:', error);
    res.status(500).json({ message: 'Failed to fetch complaints' });
  }
});

// 📌 Delete a complaint (after resolving)
router.delete('/delete-complaint/:id', async (req, res) => {
  try {
    await Complaint.findByIdAndDelete(req.params.id);
    res.status(200).json({ message: 'Complaint deleted successfully' });
  } catch (error) {
    console.error('Error deleting complaint:', error);
    res.status(500).json({ message: 'Failed to delete complaint' });
  }
});

// 📌 Delete a FAQ
router.delete('/delete-faq/:id', async (req, res) => {
  try {
    await Faq.findByIdAndDelete(req.params.id);
    res.status(200).json({ message: 'FAQ deleted successfully' });
  } catch (error) {
    console.error('Error deleting FAQ:', error);
    res.status(500).json({ message: 'Failed to delete FAQ' });
  }
});

// 📌 Update/Edit an FAQ (optional, if you want clean editing instead of delete-and-readd)
router.put('/edit-faq/:id', async (req, res) => {
  try {
    const { question, answer } = req.body;
    const updatedFaq = await Faq.findByIdAndUpdate(
      req.params.id,
      { question, answer },
      { new: true }
    );
    if (!updatedFaq) {
      return res.status(404).json({ message: 'FAQ not found' });
    }
    res.status(200).json({ message: 'FAQ updated successfully', updatedFaq });
  } catch (error) {
    console.error('Error updating FAQ:', error);
    res.status(500).json({ message: 'Failed to update FAQ' });
  }
});



// GET /api/admin/classwork/:courseId/:courseSection
router.get('/classwork/:courseId/:courseSection', async (req, res) => {
  try {
    const { courseId, courseSection } = req.params;
    const classworks = await Classwork.find({ courseId, courseSection }).sort({ dueDate: 1 });
    res.status(200).json(classworks);
  } catch (error) {
    console.error('Error fetching classwork:', error);
    res.status(500).json({ message: 'Failed to fetch classwork' });
  }
});

// Import multer
const multer = require('multer');
const path = require('path');
const fs = require('fs');

// Setup Multer for file uploads
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    const uploadPath = path.join(__dirname, '../uploads');
    if (!fs.existsSync(uploadPath)) {
      fs.mkdirSync(uploadPath);
    }
    cb(null, uploadPath);
  },
  filename: function (req, file, cb) {
    cb(null, Date.now() + '-' + file.originalname);
  }
});
const upload = multer({ storage });

// POST /api/admin/classwork/submit/:taskId
// backend/adminRoutes.js
// POST /api/admin/classwork/create
// 🚀 Correct route with Multer:
router.post('/classwork/create', upload.single('attachment'), async (req, res) => {
  try {
    const { title, description, dueDate, courseId, courseSection, courseName } = req.body;
    const file = req.file; // ✅ Now file is available

    const attachmentUrl = file ? `/uploads/${file.filename}` : '';

    const classwork = new Classwork({
      title,
      description,
      attachmentUrl,
      dueDate,
      courseId,
      courseSection,
      courseName,
    });

    await classwork.save();

    res.status(201).json({ message: 'Classwork created successfully', taskId: classwork.taskId });
  } catch (error) {
    console.error('Error creating classwork:', error);
    res.status(500).json({ message: 'Failed to create classwork' });
  }
});
// ⚡ ROUTE: Submit or Update a classwork
router.post('/classwork/submit/:taskId', upload.single('file'), async (req, res) => {
  try {
    const { taskId } = req.params;
    const { rollNo, name } = req.body;
    const file = req.file;

    if (!file) {
      return res.status(400).json({ message: 'No file uploaded' });
    }

    // 🔥 Find the classwork by taskId (not _id!)
    const classwork = await Classwork.findOne({ taskId: Number(taskId) });

    if (!classwork) {
      return res.status(404).json({ message: 'Classwork not found' });
    }

    // 🔥 Check if the student already submitted
    const existingSubmission = classwork.submissions.find(sub => sub.rollNo === rollNo);

    if (existingSubmission) {
      // If already submitted, update the file and date
      existingSubmission.submittedFileUrl = `/uploads/${file.filename}`;
      existingSubmission.submittedAt = new Date();
      existingSubmission.status = 'Submitted';
    } else {
      // Otherwise, add a new submission
      classwork.submissions.push({
        rollNo,
        name,
        submittedFileUrl: `/uploads/${file.filename}`,
        submittedAt: new Date(),
        status: 'Submitted',
      });
    }

    await classwork.save();

    res.status(200).json({ message: 'Submission successful!' });
  } catch (error) {
    console.error('Error submitting classwork:', error);
    res.status(500).json({ message: 'Server error submitting classwork.' });
  }
});



// GET /api/admin/classwork/submissions/:taskId (🔥 fixed to work by taskId not _id)


// DELETE /api/admin/classwork/delete/:classworkId
router.delete('/classwork/delete/:classworkId', async (req, res) => {
  try {
    const { classworkId } = req.params;
    await Classwork.findByIdAndDelete(classworkId);
    res.status(200).json({ message: 'Classwork deleted successfully' });
  } catch (error) {
    console.error('Error deleting classwork:', error);
    res.status(500).json({ message: 'Failed to delete classwork' });
  }
});

// GET /api/admin/classwork/student?rollNo=ROLL_NO
router.get('/classwork/student', async (req, res) => {
  try {
    const { rollNo } = req.query;

    if (!rollNo) {
      return res.status(400).json({ message: 'Roll number required' });
    }

    const student = await Student.findOne({ rollNo });
    if (!student) {
      return res.status(404).json({ message: 'Student not found' });
    }

    const courses = student.registeredCourses; // [{ id, section }]

    if (!courses || courses.length === 0) {
      return res.status(404).json({ message: 'No registered courses found' });
    }

    const classworks = await Classwork.find({
      $or: courses.map(c => ({ courseId: c.id, courseSection: c.section })),
    }).sort({ dueDate: 1 });

    res.status(200).json(classworks);
  } catch (error) {
    console.error('Error fetching student classworks:', error);
    res.status(500).json({ message: 'Failed to fetch classworks' });
  }
});

// GET /api/admin/classwork/all
router.get('/classwork/all', async (req, res) => {
  try {
    const classworks = await Classwork.find().sort({ createdAt: -1 });
    res.status(200).json(classworks);
  } catch (error) {
    console.error('Error fetching all classworks:', error);
    res.status(500).json({ message: 'Failed to fetch classworks' });
  }
});

// GET /api/admin/classwork/all-submissions
router.get('/classwork/all-submissions', async (req, res) => {
  try {
    const classworks = await Classwork.find({}, 'submissions');
    const allSubmissions = classworks.flatMap(cw => cw.submissions || []);
    res.status(200).json(allSubmissions);
  } catch (error) {
    console.error('Error fetching all submissions:', error);
    res.status(500).json({ message: 'Failed to fetch all submissions' });
  }
});

// GET /api/admin/classwork/submissions-course/:courseId/:courseSection
router.get('/classwork/submissions-course/:courseId/:courseSection', async (req, res) => {
  try {
    const { courseId, courseSection } = req.params;
    
    const classworks = await Classwork.find({ courseId, courseSection });

    if (!classworks || classworks.length === 0) {
      return res.status(404).json({ message: 'No classwork found for this course/section' });
    }

    const allSubmissions = classworks.flatMap(cw => cw.submissions || []);

    res.status(200).json(allSubmissions);
  } catch (error) {
    console.error('Error fetching submissions by course:', error);
    res.status(500).json({ message: 'Failed to fetch submissions' });
  }
});



// GET /api/admin/classwork/submissions/:taskId
// GET /api/admin/classwork/submissions/:taskId
router.get('/classwork/submissions/:taskId', async (req, res) => {
  try {
    let { taskId } = req.params;
    taskId = Number(taskId); // 🛠 very important to convert to number
    const classwork = await Classwork.findOne({ taskId: taskId });
    if (!classwork) {
      console.log('Classwork not found for taskId:', taskId);
      return res.status(404).json({ message: 'No classwork found for this task ID' });
    }

    console.log('Found classwork:', classwork);

    res.status(200).json(classwork.submissions || []);
  } catch (error) {
    console.error('Error fetching submissions:', error);
    res.status(500).json({ message: 'Failed to fetch submissions' });
  }
});


router.get('/submissions-taskid/:taskId', async (req, res) => {
  try {
    const { taskId } = req.params;

    const numericTaskId = parseInt(taskId, 10); // 🔥 forcefully convert to Number

    if (isNaN(numericTaskId)) {
      return res.status(400).json({ message: 'Invalid Task ID format' });
    }

    const classwork = await Classwork.findOne({ taskId: numericTaskId });

    if (!classwork) {
      return res.status(404).json({ message: 'No classwork found for this task ID' });
    }

    res.status(200).json(classwork.submissions || []);
  } catch (error) {
    console.error('Error fetching submissions by taskId:', error);
    res.status(500).json({ message: 'Server error' });
  }
});

// PATCH /api/admin/classwork/update/:id
router.patch('/classwork/update/:id', upload.single('attachment'), async (req, res) => {
  try {
    const { id } = req.params;
    const { title, description, dueDate } = req.body;
    const updateFields = {
      title,
      description,
      dueDate,
    };

    if (req.file) {
      updateFields.attachmentUrl = `/uploads/${req.file.filename}`;
    }

    const updatedClasswork = await Classwork.findByIdAndUpdate(
      id,
      { $set: updateFields },
      { new: true }
    );

    if (!updatedClasswork) {
      return res.status(404).json({ message: 'Classwork not found' });
    }

    res.status(200).json({ message: 'Classwork updated successfully', updatedClasswork });
  } catch (error) {
    console.error('Error updating classwork:', error);
    res.status(500).json({ message: 'Failed to update classwork' });
  }
});



module.exports = router;
